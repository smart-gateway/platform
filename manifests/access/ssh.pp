# @summary A short summary of the purpose of this class
#
# A description of what this class does
#
# @example
#   include platform::access::ssh
class platform::access::ssh (
  Enum['present', 'absent'] $ensure = 'present',
  Integer $port = -1,
  String $address_family = '',
  String $listen_address = '',
  String $listen_address_v6 = '',
  Array[String] $host_keys = [],
  String $syslog_facility = '',
  String $log_level = '',
  String $login_grace_time = '0',
  String $permit_root_login = '',
  String $strict_modes = '',
  String $max_auth_tries = '',
  String $max_sessions = '',
  String $pubkey_authentication = '',
  Array[String] $authorized_keys_file = [],
  String $authorized_principal_file = '',
  String $authorized_keys_command = '',
  String $authorized_keys_command_user = '',
  String $hostbased_authentication = '',
  String $ignore_user_known_hosts = '',
  String $ignore_rhosts = '',
  String $password_authentication = '',
  String $permit_empty_passwords = '',
  String $kbd_interactive_authentication = '',
  String $kerberos_authentication = '',
  String $kerberos_or_local_passwd = '',
  String $kerberos_ticket_cleanup = '',
  String $kerberos_get_afs_token = '',
  String $gssapi_authentication = '',
  String $gssapi_cleanup_credentials = '',
  String $gssapi_strict_acceptor_check = '',
  String $gssapi_key_exchange = '',
  String $use_pam = 'yes',
  String $allow_agent_forwarding = '',
  String $allow_tcp_forwarding = '',
  String $gateway_ports = '',
  String $x11_forwarding = 'yes',
  String $x11_display_offset = '',
  String $x11_use_localhost = '',
  String $permit_tty = '',
  String $print_motd = 'no',
  String $print_last_log = '',
  String $tcp_keep_alive = '',
  String $permit_user_environment = '',
  String $compression = '',
  String $client_alive_interval = '',
  String $client_alive_count_max = '',
  String $use_dns = '',
  String $pid_file = '',
  String $max_startups = '',
  String $permit_tunnel = '',
  String $chroot_directory = '',
  String $version_addendum = '',
  String $banner = '',
  Array[String] $accept_env = ['LANG', 'LC_*'],
  Array[String] $subsystem = ['sftp', '/usr/lib/openssh/sftp-server'],
  Array[Hash] $matches = [],
  Array[String] $ip_qos = ['lowdelay', 'throughput'],
  String $include_files = '/etc/ssh/sshd_config.d/*.conf'
) {
  $file_ensure = $ensure ? {
    'present' => 'file',
    'absent'  => 'absent',
  }

  file { '/etc/ssh/sshd_config':
    ensure  => $file_ensure,
    content => epp('platform/ssh/etc/ssh/sshd_config.epp', {
        port                           => $port,
        address_family                 => $address_family,
        listen_address                 => $listen_address,
        listen_address_v6              => $listen_address_v6,
        host_keys                      => $host_keys,
        syslog_facility                => $syslog_facility,
        log_level                      => $log_level,
        login_grace_time               => $login_grace_time,
        permit_root_login              => $permit_root_login,
        strict_modes                   => $strict_modes,
        max_auth_tries                 => $max_auth_tries,
        max_sessions                   => $max_sessions,
        pubkey_authentication          => $pubkey_authentication,
        authorized_keys_file           => $authorized_keys_file,
        authorized_principal_file      => $authorized_principal_file,
        authorized_keys_command        => $authorized_keys_command,
        authorized_keys_command_user   => $authorized_keys_command_user,
        hostbased_authentication       => $hostbased_authentication,
        ignore_user_known_hosts        => $ignore_user_known_hosts,
        ignore_rhosts                  => $ignore_rhosts,
        password_authentication        => $password_authentication,
        permit_empty_passwords         => $permit_empty_passwords,
        kbd_interactive_authentication => $kbd_interactive_authentication,
        kerberos_authentication        => $kerberos_authentication,
        kerberos_or_local_passwd       => $kerberos_or_local_passwd,
        kerberos_ticket_cleanup        => $kerberos_ticket_cleanup,
        kerberos_get_afs_token         => $kerberos_get_afs_token,
        gssapi_authentication          => $gssapi_authentication,
        gssapi_cleanup_credentials     => $gssapi_cleanup_credentials,
        gssapi_strict_acceptor_check   => $gssapi_strict_acceptor_check,
        gssapi_key_exchange            => $gssapi_key_exchange,
        use_pam                        => $use_pam,
        allow_agent_forwarding         => $allow_agent_forwarding,
        allow_tcp_forwarding           => $allow_tcp_forwarding,
        gateway_ports                  => $gateway_ports,
        x11_forwarding                 => $x11_forwarding,
        x11_display_offset             => $x11_display_offset,
        x11_use_localhost              => $x11_use_localhost,
        permit_tty                     => $permit_tty,
        print_motd                     => $print_motd,
        print_last_log                 => $print_last_log,
        tcp_keep_alive                 => $tcp_keep_alive,
        permit_user_environment        => $permit_user_environment,
        compression                    => $compression,
        client_alive_interval          => $client_alive_interval,
        client_alive_count_max         => $client_alive_count_max,
        use_dns                        => $use_dns,
        pid_file                       => $pid_file,
        max_startups                   => $max_startups,
        permit_tunnel                  => $permit_tunnel,
        chroot_directory               => $chroot_directory,
        version_addendum               => $version_addendum,
        banner                         => $banner,
        accept_env                     => $accept_env,
        subsystem                      => $subsystem,
        matches                        => $matches,
        ip_qos                         => $ip_qos,
        include_files                  => $include_files,
    }),
    notify  => Service['sshd'],
  }

  service { 'sshd':
    ensure    => running,
    enable    => true,
    subscribe => File['/etc/ssh/sshd_config'],
  }
}
